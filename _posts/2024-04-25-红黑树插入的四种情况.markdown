---
layout: post
title:  "左倾红黑树(LLRB) 插入操作的四种情况"
date:   2024-04-25 19:00:25 +0800
categories: cs61b
---

LLRB 的结构是 BST，插入新节点时，它的 insert 方法和 BST 的 insert 方法逻辑一致。

但是插入新节点后可能会破坏 LLRB 的规则，所以在 insert之后，还需要检查是否违反了规则，如果有，就修复。

违反 LLRB 规则的情况以及解决办法：
- 一个 Node 有两个红色子节点：flip 该 node 的颜色。
- 一个 Node 的【左子节点】和【左子节点的左子节点】为红色：rotateRight(Node)
- 一个 Node 的【左子节点】和【左子节点的右子节点】为红色：rotateLeft(Node.left), rotetaRight(Node)
- 一个 Node 有一个红色子节点，且在它的右侧：rotateLeft（Node）

为什么第一种情况只需要翻转颜色呢？
翻转颜色以前，对应的是 2-3 b-tree 里，一个节点有 3 个元素的临时状态，翻转颜色后，node 从黑色变为红色，就是 2-3 b-tree 这三个元素，中间值上升，剩下两个元素成为它的子节点，变成一个新的树的状态。